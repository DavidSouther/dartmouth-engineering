md-content.md-padding
  md-toolbar.md-whiteframe-z1
    md-content(
      layout="row",
      layout-align="space-around"
    )
      md-input-container(
        flex="50"
      )
        label.md-no-float
          | Length:&nbsp;{{ simulation.length | number:1 }}&nbsp;m
        md-slider(
          aria-label="Set beam length."
          ng-model="simulation.length",
          min="0",
          max="10",
          step=".1"
        )
      md-input-container(
        flex="30"
      )
        div(layout="row")
          label.md-no-float
            | Load:&nbsp;{{simulation.load.applied}}&nbsp;{{ simulation.load.loading == 'point' ? 'kg' : 'kg/m'}}
        md-slider(
          aria-label="Set beam loading."
          ng-model="simulation.load.applied",
          min="10",
          max="100",
          step="1"
        )
      md-input-container(
        flex="20"
      )
        label.md-no-float Loading
        md-select(
          placeholder="Loading"
          ng-model="simulation.load.loading"
        )
          md-option( ng-value="'point'" ) Concentrated
          md-option( ng-value="'even'" ) Distributed

    md-content(layout="row", layout-align="space-around")
      md-input-container(
        flex="50"
      )
        label.md-no-float
          | Support:&nbsp;{{ simulation.support | number:2 }}&nbsp;m
        md-slider(
          aria-label="Set beam support point."
          ng-model="simulation.support",
          min="0",
          max="10",
          step=".1"
        )
      md-input-container(flex)
        label.md-no-float
          | Load&nbsp;Point&nbsp;{{ simulation.load.point | number:1}}m
        md-slider(
          aria-label="Set load point distance.",
          ng-disabled="simulation.load.loading == 'even'"
          ng-model="simulation.load.point",
          min="0.1",
          max="10",
          step=".1"
        )
  md-card(
    layout="row",
    layout-align="space-around"
  )
    div(flex, layout="column", layout-align="center center")
      svg(
        height="60px"
        width="400px"
        graph-scales="{\
          x: ['linear', -1, 13], \
          y: ['linear', -1, .5], \
          applied: ['log', 10, 100, 10, 20], \
        }"
      )
        path(
          stroke="black"
          fill="none"
          ng-attr-d="\
            M{{$scales.x(0)}},{{$scales.y(0)}} \
            L{{$scales.x(simulation.length)}},{{$scales.y(0)}} \
            L{{$scales.x(simulation.length)}},{{$scales.y(0) - 10}} \
            L{{$scales.x(0)}},{{$scales.y(0) - 10}} \
            Z \
          "
        )
        g
          arrow(
            ng-if="simulation.load.loading == 'point'"
            color="'blue'"
            rotation="90"
            length="$scales.applied(simulation.load.applied)"
            tip="[$scales.x(simulation.load.point), $scales.y(0) - 10]"
          )
          g(
            ng-if="simulation.load.loading == 'even'"
          )
            path(
              stroke="blue"
              fill="none"
              ng-attr-d="\
                M{{$scales.x(0)}},{{$scales.y(0) - (10 + $scales.applied(simulation.load.applied))}}\
                L{{$scales.x(simulation.length)}},{{$scales.y(0) - (10 + $scales.applied(simulation.load.applied))}}\
              "
            )
            arrow(
              ng-repeat="a in forall(simulation.length)"
              color="'blue'"
              rotation="90"
              length="$scales.applied(simulation.load.applied)"
              tip="[$scales.x(simulation.length * ($index / Math.ceil(simulation.length))), $scales.y(0) - 10]"
            )
        g
          g(
            ng-if="simulation.support > 0"
          )
            circle(
              stroke="green"
              fill="none"
              radius="5"
              center="[\
                $scales.x(simulation.support) + 1, \
                $scales.y(0) + 6 \
              ]"
            )
            path(
              fill="none"
              stroke="green"
              ng-attr-d="\
                M{{ $scales.x(0)}}, {{ $scales.y(0) }}\
                l5,10 h-10 z \
              "
            )
          g(
            ng-if="simulation.support == 0"
          )
            path(
              fill="none"
              stroke="green"
              ng-attr-d="\
                M{{$scales.x(0)}}, {{ $scales.y(0) - 15}},\
                v30 m0,-5, l-10,5 m10,-5 m0,-10, l-10,5 m10,-5, m0,-10, l-10,5\
              "
            )
      svg(
        height="100px"
        width="400px"
        graph-scales="{\
          x: ['linear', -1, 13], \
          y: ['linear', -700000, 300000], \
          applied: ['log', 10, 100, 10, 20], \
        }"
      )
        path(
          stroke="black"
          fill="green"
          ng-init="vs = Vs()"
          ng-attr-d="\
            M{{$scales.x(0)}},{{$scales.y(0)}} \
            L{{$scales.x(0)}},{{$scales.y(0 - V(1))}} \
            L{{$scales.x(simulation.support)}},{{$scales.y(0 + V(3))}} \
            L{{$scales.x(simulation.support)}},{{$scales.y(0 - V(2))}} \
            L{{$scales.x(simulation.length)}},{{$scales.y(0)}} \
            z \
          "
        )
        text(
          ng-if="V(1) > 0"
          at="[$scales.x(0), $scales.y(-V(1)) - 5]"
        ) {{ V(1)|number:0 }} kg·m
        text(
          at="[$scales.x(simulation.support), $scales.y(V(3)) + 15]"
        ) {{ V(3)|number:0 }} kg·m
        text(
          ng-if="V(2) > 0"
          at="[$scales.x(simulation.support), $scales.y(-V(2)) - 5]"
        ) {{ V(2)|number:0 }} kg·m
      svg(
        height="100px"
        width="400px"
        graph-scales="{\
          x: ['linear', -1, 13], \
          y: ['linear', -12500, 12500], \
          applied: ['log', 10, 100, 10, 20], \
        }"
      )
        path(
          stroke="black"
          fill="orange"
          ng-attr-d="{{moment($scales)}}"
        )
      //- md-content.md-padding
      //-   pre {{ getXs() | json }}
