md-content(ng-init="simDetails = false")
  md-toolbar.md-whiteframe-z1.toolbar
    section(layout="row", layout-align="space-around")
      md-input-group.material(flex="33", layout-align="center center", ng-click="simulation.showMaterialList($event)")
        div(flex, layout-align="center center")
          span.material-name {{currentMaterial.material}}
        div(flex, layout-align="center center")
          span.material-property-label Density &nbsp;
          span.material-property-value {{ currentMaterial.density|number:0 }} &nbsp;
          span.material-property-label Elasticity &nbsp;
          span.material-property-value {{ currentMaterial.elasticity | scientific }} &nbsp;
      md-input-group.material(flex="33", layout-align="center center", ng-click="simulation.showMomentList($event)")
        div(flex, layout-align="center center")
          span.moment-name {{currentShape.shape}}
        div(flex, layout-align="center center")
          span.material-property-label Description &nbsp;
          span.material-property-value {{ currentShape.description }} &nbsp;
      md-input-group.supported-weight(flex, layout="column", layout-align="left center")
        div.supported-weight-label Supported Weight, in kg &nbsp;
          span.material-property-value {{ simulation.supported | number:0}}
        // md-slider(ng-model="simulation.supported", min="0", max="110")
        md-slider(
          ng-model="supportedWeightSlide",
          ng-model-options="{getterSetter: true}",
          min="0",
          max="{{ 11 * simulation.buckle() }}"
        )
    section(layout="row", layout-align="space-around")
      md-text-float(flex, label="Base Diameter, in m", ng-model="simulation.base")
      md-text-float(flex, label="Length, in m", ng-model="simulation.length")
  md-list
    md-item(layout="column", layout-align="space-between")
      p(layout="row", layout-align="space-around")
        b Applied Load:
        | {{ simulation.applied() | number:0 }}&nbsp;N
        b Buckling Load:
        | {{ simulation.buckle() | number:0 }}&nbsp;N
      div(flex, layout="row", layout-align="center center")
        svg(
          height="400px"
          width="200px"
          graph-scales="{\
            x: ['linear', -10, 10], \
            y: ['linear', 50, 0], \
            h: ['linear', 0, simulation.buckle(), 120, 0], \
          }"
          graph-tick="$scales.h.domain([0, simulation.buckle()])"
        )
          path(
            stroke="black"
            stroke-width="1px"
            ng-attr-fill="hsl({{ $scales.h(\
                simulation.applied() < simulation.buckle() ? simulation.applied() : simulation.buckle()\
              ) }}, 100%, 50%)"
            ng-attr-d="\
              M{{ $scales.x(-Math.sqrt(simulation.base)) }},{{ $scales.y(0) }}\
              L{{ $scales.x(-Math.sqrt(simulation.base)) }},{{ $scales.y(simulation.length) }}\
              L{{ $scales.x(0) }},{{ $scales.y(simulation.length) + 7 }}\
              L{{ $scales.x(0) }},{{ $scales.y(0) + 7 }}\
              Z\
            "
          )
          path(
            stroke="black"
            stroke-width="1px"
            ng-attr-fill="hsl({{ $scales.h(\
                simulation.applied() < simulation.buckle() ? simulation.applied() : simulation.buckle()\
              ) }}, 100%, 50%)"
            ng-attr-d="\
              M{{ $scales.x(0) }},{{ $scales.y(0) + 7 }}\
              L{{ $scales.x(0) }},{{ $scales.y(simulation.length) + 7 }}\
              L{{ $scales.x(Math.sqrt(simulation.base) / 4) }},{{ $scales.y(simulation.length) - 7 }}\
              L{{ $scales.x(Math.sqrt(simulation.base) / 4) }},{{ $scales.y(0) - 7 }}\
              Z\
            "
          )
          path(
            stroke="black"
            stroke-width="1px"
            ng-attr-fill="hsl({{ $scales.h(\
                simulation.applied() < simulation.buckle() ? simulation.applied() : simulation.buckle()\
              ) }}, 100%, 50%)"
            ng-attr-d="\
              M{{ $scales.x(-Math.sqrt(simulation.base)) }},{{ $scales.y(simulation.length) }}\
              L{{ $scales.x( 2.5 * -Math.sqrt(simulation.base) / 4) }},{{ $scales.y(simulation.length) - 14 }} \
              L{{ $scales.x(Math.sqrt(simulation.base) / 4) }},{{ $scales.y(simulation.length) - 7 }}\
              L{{ $scales.x(0) }},{{ $scales.y(simulation.length) + 7 }}\
              Z\
            "
          )
          path(
            ng-if="simulation.applied() > simulation.buckle()"
            stroke="black"
            stroke-width="1px"
            fill-opacity="0"
            ng-attr-d="\
              M{{ $scales.x(-Math.sqrt(simulation.base)) - 7 }},{{ $scales.y(simulation.length / 4) }}\
              L{{ $scales.x(Math.sqrt(simulation.base) / 4) }},{{ $scales.y(simulation.length / 4) }}\
            "
          )
      md-divider
      md-button(
        target="_new"
        ng-attr-href="http://www.wolframalpha.com/input/?i=%28+pi%5E2+*+{{simulation.elasticity}}+*+%28{{simulation.basearea}}%29^2%2F12+%29+%2F+{{simulation.length}}%5E2+N"
      ) View in WolframAlpha
